CREATE TABLE Cliente(
ID int NOT NULL PRIMARY KEY,
Indirizzo varchar(20) NOT NULL,
Tel bigint NOT NULL,
PersonaDiRiferimento varchar(20),
NumeroDiRichieste int NOT NULL);

CREATE TABLE Tecnico(
CF varchar(16) PRIMARY KEY);

CREATE TABLE Competenza(
Campo varchar(20) PRIMARY KEY);

CREATE TABLE Richiesta(
nPratica int PRIMARY KEY,
TipoProblema varchar(20) NOT NULL,
Cliente int NOT NULL,
SistemaInteressato varchar(20) NOT NULL,
NumeroDiInterventi int NOT NULL,
CONSTRAINT fk_tipoProblema FOREIGN KEY (TipoProblema) REFERENCES Competenza(Campo),
CONSTRAINT fk_cliente FOREIGN KEY (Cliente) REFERENCES Cliente(ID));

CREATE TABLE Intervento(
Richiesta int NOT NULL,
nIntervento int NOT NULL,
Data DATE NOT NULL,
Durata interval NOT NULL,
TelCliente bigint,
PRIMARY KEY(Richiesta, nIntervento),
CONSTRAINT fk_richiesta FOREIGN KEY (Richiesta) REFERENCES Richiesta(nPratica));

CREATE TABLE RegistroInterventi(
Tecnico varchar(16) NOT NULL,
Richiesta int NOT NULL,
Intervento int NOT NULL,
PRIMARY KEY (Tecnico, Richiesta, Intervento),
CONSTRAINT fk_tecnico FOREIGN KEY (Tecnico) REFERENCES Tecnico(CF),
CONSTRAINt fk_richiesta_intervento FOREIGN KEY (Richiesta, Intervento) REFERENCES Intervento(Richiesta, nIntervento));

CREATE TABLE Possiede(
Tecnico varchar(16) NOT NULL,
Competenza varchar(20) NOT NULL,
PRIMARY KEY (Tecnico, Competenza),
CONSTRAINT fk_tecnico FOREIGN KEY (Tecnico) REFERENCES Tecnico(CF),
CONSTRAINT fk_competenza FOREIGN KEY (Competenza) REFERENCES Competenza(Campo));


#############################################################################
### FUNCTION AND TRIGGER 1: UPDATE(+) nInterventi AFTER INSERT Intervento ###
#############################################################################


CREATE or REPLACE FUNCTION increase_numeroDiInterventi()
RETURNS TRIGGER
language plpgsql
as $$

	declare
	newValue integer;

	begin
	newValue := (SELECT (NumeroDiInterventi + 1) FROM Richiesta WHERE nPratica = new.Richiesta);
	UPDATE Richiesta SET NumeroDiInterventi = newValue WHERE nPratica = new.Richiesta;
	return new;
	end;
$$;

CREATE TRIGGER increase_counter
AFTER INSERT ON Intervento
for each row
execute procedure increase_numeroDiInterventi();


#############################################################################
### FUNCTION AND TRIGGER 2: UPDATE(-) nInterventi AFTER DELETE Intervento ###
#############################################################################


CREATE or REPLACE FUNCTION decrease_numeroDiInterventi()
RETURNS TRIGGER
language plpgsql
as $$

	declare
	newValue integer;

	begin
	newValue := (SELECT (NumeroDiInterventi - 1) FROM Richiesta WHERE nPratica = new.Richiesta);
	UPDATE Richiesta SET NumeroDiInterventi = newValue WHERE nPratica = new.Richiesta;
	return new;
	end;
$$;

CREATE TRIGGER decrease_counter
AFTER DELETE ON Intervento
for each row
execute procedure decrease_numeroDiInterventi();

#############################################################################
###  FUNCTION AND TRIGGER 3: UPDATE(+) nRichieste AFTER INSERT Richiesta  ###
#############################################################################

CREATE OR REPLACE FUNCTION increase_numeroDiRichieste()
RETURNS TRIGGER
language plpgsql
as $$

	declare 
	newValue integer;

	begin
	newValue := (SELECT (NumeroDiRichieste + 1) FROM Cliente WHERE ID = new.Cliente);
	UPDATE Cliente SET NumeroDiRichieste = newValue WHERE ID = new.Cliente;
	return new;
	end;
$$;

CREATE TRIGGER increase_counter
AFTER INSERT ON Richiesta
for each row
execute procedure increase_numeroDiRichieste();

#############################################################################
### FUNCTION AND TRIGGER 4: UPDATE(-) nRichieste AFTER DELETE Richiesta ###
#############################################################################

CREATE OR REPLACE FUNCTION decrease_numeroDiRichieste()
RETURNS TRIGGER
language plpgsql
as $$

	declare 
	newValue integer;

	begin
	newValue := (SELECT (NumeroDiRichieste - 1) FROM Cliente WHERE ID = new.Cliente);
	UPDATE Cliente SET NumeroDiRichieste = newValue WHERE ID = new.Cliente;
	return new;
	end;
$$;

CREATE TRIGGER decrease_counter
AFTER DELETE ON Richiesta
for each row
execute procedure update_numeroDiRichieste();


